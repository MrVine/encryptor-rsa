package main

import (
	"log"
	rsa "github.com/mrvine/encryptor-rsa"
)

func demonstration() {
	plain := "Plain text"

	// ----------------- SIDE #1 ------------------

	// Initialize encryptor1
	encryptor1, _ := rsa.Init(rsa.DefaultKeyLength)

	// Retrieve public key to send it to SIDE #2
	publicKey, _ := encryptor1.GetPublicKeyAsPem()

	// Retrieve private key to save it locally
	privateKey, _ := encryptor1.GetPrivateKeyAsPem()

	// Suppose that in this point
	// public key is transmitted over internet
	// or by any other way

	// --------------------------------------------



	// ----------------- SIDE #2 ------------------

	// Initialize encryptor2 as Empty RsaEncryptor,
	// to avoid keys generation
	encryptor2 := rsa.InitEmpty()

	// Set public key, generated by encryptor1
	// to encryptor2.PublicKey
	encryptor2.SetPublicKeyFromPem(publicKey)

	// Encrypt plain data by encryptor2
	encrypted, _ := encryptor2.Encrypt(plain)

	// suppose that in this point
	// encrypted data is transmitted over
	// internet or by any other way

	// --------------------------------------------



	// ----------------- SIDE #2 ------------------

	// Initialize decryptor as Empty RsaEncryptor,
	// to avoid keys generation
	decryptor := rsa.InitEmpty()

	// Loading previously saved private key
	decryptor.SetPrivateKeyFromPem(privateKey)

	// Decrypting message
	decrypted, _ := decryptor.Decrypt(encrypted)

	// --------------------------------------------



	if plain == decrypted {
		log.Println("DECRYPTED MESSAGE IS EQUALS TO PLAIN MESSAGE")
	} else {
		log.Println("SOMETHING GOES WRONG")
	}
}


func main() {
	demonstration()
}
